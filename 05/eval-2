#!/usr/bin/env python3

from functools import reduce
from itertools import batched, takewhile
import sys

# Observations:
#
# 0. All seed values (and all intermediate values) are always non-negative.
# 1. Due to how mappings are defined, larger values within a source range
#    will always map to larger values in the destination range, e.g.:
#    98 -> 50, 99 -> 51, â€¦
# 2. Because we are looking for the lowest possible output,
#    it is therefore enough to look at the lower ends of ranges.
#
# In general, for efficiency, we perform arithmetic on ranges/intervals
# for each mapping level, rather than iterating the large sequences of
# numbers.
#
# Starting with the seed ranges, we check how they overlap with the first
# mapping's source ranges and compute new, offset ranges to be used as seeds
# for the next level.

def blocks(lines):
    while True:
        block = list(l for l in takewhile(lambda v: len(v) > 0, lines))

        if len(block) == 0:
            break

        yield block

def mapping(spec):
    header, *rows = spec

    name = header.removesuffix(" map:")

    entries = (map(int, row.split()) for row in rows)

    ranges = list(((src, src + lng), dst - src) for dst, src, lng in entries)
    ranges = sorted(ranges, key=lambda p: p[0][0])

    return name, ranges

def parse(file):
    lines = map(lambda l: l.rstrip(), file)

    seeds = list(map(int, next(lines).removeprefix("seeds: ").split()))

    next(lines) # skip blank line

    mappings = dict(mapping(spec) for spec in blocks(lines))

    return seeds, mappings

def compose(mappings, order):
    ordered = list(map(lambda name: mappings[name], order))
    return lambda v: reduce(lambda x, f: f(x), ordered, v)


if __name__ == "__main__":
    seeds, mappings = parse(sys.stdin)

    seeds = [(a, a + b) for a, b in batched(seeds, 2)]

    order = [
        "seed-to-soil",
        "soil-to-fertilizer",
        "fertilizer-to-water",
        "water-to-light",
        "light-to-temperature",
        "temperature-to-humidity",
        "humidity-to-location"
    ]

    for name in order:
        out = []

        for seed in seeds:
            start = seed[0]
            buffer = []

            for rng, offset in mappings[name]:
                # Ranges within each mapping are sorted by their lower bound.
                # If we are past the end of the current seed range already,
                # we do not need to look at this seed any further.
                if rng[0] >= seed[1]:
                    break

                # If the mapped range is left of the seed range, try the next.
                if start >= rng[1]:
                    continue

                # Start of the current slice of the seed range falls within the
                # mapped range, so create a new range as output for the next
                # level and proceed from the right edge of the mapped range.
                if rng[0] <= start < rng[1]:
                    a, b = max(rng[0], start), min(rng[1], seed[1])
                    buffer.append((a + offset, b + offset))
                    start = b
                # If the mapped range is to the right of the current slice
                # start, create an (unmapped) output range for the values up to
                # the that range's left edge. Then create an output range with
                # offset for the mapped section.
                elif start < rng[0]:
                    a, b = rng[0], min(rng[1], seed[1])
                    buffer.append((start, a))
                    buffer.append((a + offset, b + offset))
                    start = b

            if len(buffer) > 0:
                out += buffer
            else:
                out.append(seed)

        seeds = out

    print(min(a for a, _ in seeds))
