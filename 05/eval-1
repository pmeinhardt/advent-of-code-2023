#!/usr/bin/env python3

from functools import reduce
from itertools import takewhile
import sys

def blocks(lines):
    while True:
        block = list(l for l in takewhile(lambda v: len(v) > 0, lines))

        if len(block) == 0:
            break

        yield block

def mapping(spec):
    header, *rows = spec

    name = header.removesuffix(" map:")

    entries = (map(int, row.split()) for row in rows)
    ranges = list((src, src + lng, dst - src) for dst, src, lng in entries)

    def fn(n):
        for a, b, offset in ranges:
            if a <= n < b:
                return n + offset
        return n

    return name, fn

def parse(file):
    lines = map(lambda l: l.rstrip(), file)

    seeds = list(map(int, next(lines).removeprefix("seeds: ").split()))

    next(lines) # skip blank line

    mappings = dict(mapping(spec) for spec in blocks(lines))

    return seeds, mappings

def compose(mappings, order):
    ordered = list(map(lambda name: mappings[name], order))
    return lambda v: reduce(lambda x, f: f(x), ordered, v)


if __name__ == "__main__":
    seeds, mappings = parse(sys.stdin)

    fn = compose(mappings, [
        "seed-to-soil",
        "soil-to-fertilizer",
        "fertilizer-to-water",
        "water-to-light",
        "light-to-temperature",
        "temperature-to-humidity",
        "humidity-to-location"
    ])

    print(min(map(fn, seeds)))
